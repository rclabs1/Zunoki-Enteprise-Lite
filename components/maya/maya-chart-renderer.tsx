"use client";

import React, { useEffect, useRef, useState } from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler,
} from 'chart.js';
import { Line, Bar, Pie, Doughnut } from 'react-chartjs-2';
import { Play, Pause, Volume2, VolumeX, MoreVertical, Maximize2 } from 'lucide-react';
import { mayaVoiceNarrationService } from '@/lib/services/maya-voice-narration-service';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler
);

interface ChartData {
  type: 'line' | 'bar' | 'pie' | 'doughnut' | 'scatter' | 'area';
  data: any;
  options: any;
  insights: {
    diagnostic: Array<{
      finding: string;
      explanation: string;
      impact: 'high' | 'medium' | 'low';
      metrics: { [key: string]: string | number };
    }>;
    prescriptive: Array<{
      action: string;
      priority: 'urgent' | 'high' | 'medium' | 'low';
      estimatedImpact: string;
      timeline: string;
      difficulty: 'easy' | 'medium' | 'complex';
      roi: string;
    }>;
    predictive: Array<{
      forecast: string;
      confidence: number;
      timeframe: string;
      scenario: 'optimistic' | 'realistic' | 'pessimistic';
      keyDrivers: string[];
    }>;
  };
  voiceNarration: string;
  quickActions: Array<{
    label: string;
    action: string;
    data?: any;
    type: 'diagnostic' | 'prescriptive' | 'predictive';
  }>;
}

interface MayaChartRendererProps {
  chartData: ChartData;
  onActionClick?: (action: string, data?: any) => void;
  className?: string;
  autoNarrate?: boolean;
}

const MayaChartRenderer: React.FC<MayaChartRendererProps> = ({
  chartData,
  onActionClick,
  className = '',
  autoNarrate = false
}) => {
  const chartRef = useRef<ChartJS>(null);
  const [isNarrating, setIsNarrating] = useState(false);
  const [voiceEnabled, setVoiceEnabled] = useState(true);
  const [isFullscreen, setIsFullscreen] = useState(false);

  useEffect(() => {
    if (autoNarrate && voiceEnabled && chartData.voiceNarration) {
      handleNarration();
    }
  }, [chartData, autoNarrate, voiceEnabled]);

  const handleNarration = async () => {
    if (isNarrating) {
      mayaVoiceNarrationService.stopSpeaking();
      setIsNarrating(false);
      return;
    }

    try {
      setIsNarrating(true);
      await mayaVoiceNarrationService.speak(chartData.voiceNarration);
    } catch (error) {
      console.error('Voice narration failed:', error);
    } finally {
      setIsNarrating(false);
    }
  };

  const renderChart = () => {
    const commonProps = {
      ref: chartRef,
      data: chartData.data,
      options: {
        ...chartData.options,
        responsive: true,
        maintainAspectRatio: false,
      }
    };

    switch (chartData.type) {
      case 'line':
      case 'area':
        return <Line {...commonProps} />;
      case 'bar':
        return <Bar {...commonProps} />;
      case 'pie':
        return <Pie {...commonProps} />;
      case 'doughnut':
        return <Doughnut {...commonProps} />;
      default:
        return <Line {...commonProps} />;
    }
  };

  const getChartTypeIcon = () => {
    switch (chartData.type) {
      case 'line':
      case 'area':
        return 'üìà';
      case 'bar':
        return 'üìä';
      case 'pie':
      case 'doughnut':
        return 'ü•ß';
      default:
        return 'üìä';
    }
  };

  return (
    <div className={`maya-chart-container bg-white rounded-lg border shadow-sm ${className}`}>
      {/* Chart Header */}
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center space-x-3">
          <span className="text-2xl">{getChartTypeIcon()}</span>
          <div>
            <h3 className="font-medium text-gray-900">
              {chartData.options?.plugins?.title?.text || 'Marketing Analysis'}
            </h3>
            <p className="text-sm text-gray-500">
              Generated by Zunoki. ‚Ä¢ {chartData.type.charAt(0).toUpperCase() + chartData.type.slice(1)} Chart
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-2">
          {/* Voice Controls */}
          <button
            onClick={() => setVoiceEnabled(!voiceEnabled)}
            className={`p-2 rounded-md transition-colors ${
              voiceEnabled 
                ? 'text-blue-600 hover:bg-blue-50' 
                : 'text-gray-400 hover:bg-gray-50'
            }`}
            title={voiceEnabled ? 'Voice enabled' : 'Voice disabled'}
          >
            {voiceEnabled ? <Volume2 size={16} /> : <VolumeX size={16} />}
          </button>

          {/* Narration Control */}
          {chartData.voiceNarration && voiceEnabled && (
            <button
              onClick={handleNarration}
              className={`p-2 rounded-md transition-colors ${
                isNarrating 
                  ? 'text-red-600 hover:bg-red-50' 
                  : 'text-green-600 hover:bg-green-50'
              }`}
              title={isNarrating ? 'Stop narration' : 'Play narration'}
            >
              {isNarrating ? <Pause size={16} /> : <Play size={16} />}
            </button>
          )}

          {/* Fullscreen */}
          <button
            onClick={() => setIsFullscreen(!isFullscreen)}
            className="p-2 rounded-md text-gray-600 hover:bg-gray-50 transition-colors"
            title="Fullscreen"
          >
            <Maximize2 size={16} />
          </button>

          {/* More Options */}
          <button className="p-2 rounded-md text-gray-600 hover:bg-gray-50 transition-colors">
            <MoreVertical size={16} />
          </button>
        </div>
      </div>

      {/* Chart Canvas */}
      <div className={`chart-canvas ${isFullscreen ? 'fixed inset-0 z-50 bg-white' : 'p-4'}`}>
        {isFullscreen && (
          <div className="flex items-center justify-between p-4 border-b bg-white">
            <div className="flex items-center space-x-3">
              <span className="text-2xl">{getChartTypeIcon()}</span>
              <div>
                <h3 className="font-medium text-gray-900">
                  {chartData.options?.plugins?.title?.text || 'Marketing Analysis'}
                </h3>
                <p className="text-sm text-gray-500">Fullscreen View</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              {/* Voice Controls in Fullscreen */}
              <button
                onClick={() => setVoiceEnabled(!voiceEnabled)}
                className={`p-2 rounded-md transition-colors ${
                  voiceEnabled 
                    ? 'text-blue-600 hover:bg-blue-50' 
                    : 'text-gray-400 hover:bg-gray-50'
                }`}
                title={voiceEnabled ? 'Voice enabled' : 'Voice disabled'}
              >
                {voiceEnabled ? <Volume2 size={16} /> : <VolumeX size={16} />}
              </button>

              {/* Narration Control in Fullscreen */}
              {chartData.voiceNarration && voiceEnabled && (
                <button
                  onClick={handleNarration}
                  className={`p-2 rounded-md transition-colors ${
                    isNarrating 
                      ? 'text-red-600 hover:bg-red-50' 
                      : 'text-green-600 hover:bg-green-50'
                  }`}
                  title={isNarrating ? 'Stop narration' : 'Play narration'}
                >
                  {isNarrating ? <Pause size={16} /> : <Play size={16} />}
                </button>
              )}

              {/* Close Fullscreen */}
              <button
                onClick={() => setIsFullscreen(false)}
                className="p-2 rounded-md bg-gray-100 hover:bg-gray-200 transition-colors"
                title="Exit fullscreen"
              >
                ‚úï
              </button>
            </div>
          </div>
        )}
        
        <div className={isFullscreen ? 'h-[calc(100vh-120px)] p-6' : 'h-64 md:h-80'}>
          {renderChart()}
        </div>
      </div>

      {/* Advanced Insights Section */}
      {chartData.insights && (
        <div className="border-t bg-gray-50">
          {/* Diagnostic Insights */}
          {chartData.insights.diagnostic && chartData.insights.diagnostic.length > 0 && (
            <div className="p-4 border-b border-gray-200">
              <h4 className="font-medium text-gray-900 mb-3 flex items-center">
                üîç What Happened (Diagnostic)
              </h4>
              <div className="space-y-3">
                {chartData.insights.diagnostic.map((insight, index) => (
                  <div key={index} className="bg-white p-3 rounded-lg border">
                    <div className="flex items-start justify-between mb-2">
                      <h5 className="font-medium text-gray-800">{insight.finding}</h5>
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        insight.impact === 'high' ? 'bg-red-100 text-red-700' :
                        insight.impact === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                        'bg-green-100 text-green-700'
                      }`}>
                        {insight.impact} impact
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{insight.explanation}</p>
                    <div className="flex flex-wrap gap-2">
                      {Object.entries(insight.metrics).map(([key, value]) => (
                        <div key={key} className="bg-gray-50 px-2 py-1 rounded text-xs">
                          <span className="font-medium">{key.replace('_', ' ')}: </span>
                          <span className="text-gray-700">{value}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Prescriptive Insights */}
          {chartData.insights.prescriptive && chartData.insights.prescriptive.length > 0 && (
            <div className="p-4 border-b border-gray-200">
              <h4 className="font-medium text-gray-900 mb-3 flex items-center">
                üéØ What To Do (Prescriptive)
              </h4>
              <div className="space-y-3">
                {chartData.insights.prescriptive.map((insight, index) => (
                  <div key={index} className="bg-white p-3 rounded-lg border">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex-1">
                        <p className="font-medium text-gray-800 mb-1">{insight.action}</p>
                        <div className="flex items-center space-x-4 text-sm text-gray-600">
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            insight.priority === 'urgent' ? 'bg-red-100 text-red-700' :
                            insight.priority === 'high' ? 'bg-orange-100 text-orange-700' :
                            insight.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                            'bg-blue-100 text-blue-700'
                          }`}>
                            {insight.priority} priority
                          </span>
                          <span>‚è±Ô∏è {insight.timeline}</span>
                          <span>üìà {insight.estimatedImpact}</span>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center justify-between text-sm text-gray-600">
                      <span>Difficulty: <span className="font-medium">{insight.difficulty}</span></span>
                      <span>ROI: <span className="font-medium text-green-600">{insight.roi}</span></span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}

          {/* Predictive Insights */}
          {chartData.insights.predictive && chartData.insights.predictive.length > 0 && (
            <div className="p-4">
              <h4 className="font-medium text-gray-900 mb-3 flex items-center">
                üîÆ What's Coming (Predictive)
              </h4>
              <div className="space-y-3">
                {chartData.insights.predictive.map((insight, index) => (
                  <div key={index} className="bg-white p-3 rounded-lg border">
                    <div className="flex items-start justify-between mb-2">
                      <p className="font-medium text-gray-800 flex-1">{insight.forecast}</p>
                      <div className="flex items-center space-x-2">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          insight.scenario === 'optimistic' ? 'bg-green-100 text-green-700' :
                          insight.scenario === 'realistic' ? 'bg-blue-100 text-blue-700' :
                          'bg-orange-100 text-orange-700'
                        }`}>
                          {insight.scenario}
                        </span>
                        <span className="text-xs text-gray-600">
                          {insight.confidence}% confidence
                        </span>
                      </div>
                    </div>
                    <div className="text-sm text-gray-600 mb-2">
                      Timeframe: <span className="font-medium">{insight.timeframe}</span>
                    </div>
                    <div>
                      <span className="text-sm text-gray-600">Key drivers: </span>
                      <div className="flex flex-wrap gap-1 mt-1">
                        {insight.keyDrivers.map((driver, dIndex) => (
                          <span key={dIndex} className="bg-purple-50 text-purple-700 px-2 py-1 rounded text-xs">
                            {driver}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Quick Actions */}
      {chartData.quickActions && chartData.quickActions.length > 0 && (
        <div className="p-4 border-t">
          <h4 className="font-medium text-gray-900 mb-3">‚ö° Quick Actions</h4>
          <div className="flex flex-wrap gap-2">
            {chartData.quickActions.map((action, index) => (
              <button
                key={index}
                onClick={() => onActionClick?.(action.action, action.data)}
                className={`px-3 py-1.5 text-sm font-medium rounded-md transition-colors flex items-center space-x-2 ${
                  action.type === 'prescriptive' ? 'text-green-700 bg-green-50 hover:bg-green-100' :
                  action.type === 'diagnostic' ? 'text-blue-700 bg-blue-50 hover:bg-blue-100' :
                  action.type === 'predictive' ? 'text-purple-700 bg-purple-50 hover:bg-purple-100' :
                  'text-gray-700 bg-gray-50 hover:bg-gray-100'
                }`}
              >
                <span>{
                  action.type === 'prescriptive' ? 'üéØ' :
                  action.type === 'diagnostic' ? 'üîç' :
                  action.type === 'predictive' ? 'üîÆ' : '‚ö°'
                }</span>
                <span>{action.label}</span>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Voice Narration Status */}
      {isNarrating && (
        <div className="absolute top-2 right-2 flex items-center space-x-2 bg-green-100 text-green-800 px-2 py-1 rounded-md text-xs">
          <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
          <span>Maya is speaking...</span>
        </div>
      )}
    </div>
  );
};

export default MayaChartRenderer;